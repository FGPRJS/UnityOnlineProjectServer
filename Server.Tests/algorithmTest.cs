using System;
using UnityOnlineProjectServer.Connection;
using UnityOnlineProjectServer.Utility;
using Xunit;

namespace Server.Tests
{
    public class algorithmTest
    {
        [Fact]
        public void RFC6455DataLengthCalculate_7byte()
        {
            //0b11111001
            var dataBitArr = BitByte.BytetoBitArray(0xF5);

            //Length Byte(Part of)
            var byteLength = BitByte.PartofBitArraytoByte(dataBitArr, 1);

            Assert.Equal(0x75, byteLength);
        }

        [Fact]
        public void RFC6455DataLengthCalculate_16byte()
        {
            byte[] data = new byte[] { 0x7E, 0x01, 0x59 };

            var byteLength = 0;

            int i = 1;

            for (int payloadIdx = 1; payloadIdx >= 0; payloadIdx--)
            {
                byteLength += data[i] << (8 * payloadIdx);
                i++;
            }

            var result = byteLength;
            Assert.Equal(345, result);
        }

        [Fact]
        public void RFC6455DataLengthCalculate_64byte()
        {
            byte[] data = new byte[] { 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };

            var byteLength = 0;

            int i = 1;

            for (int payloadIdx = 7; payloadIdx >= 0; payloadIdx--)
            {
                byteLength += data[i] << (8 * payloadIdx);
                i++;
            }

            var result = byteLength;
            Assert.Equal(65536, result);
        }

        [Theory]
        [InlineData(1, new byte[] {0x81,
0xfe,
0x01,
0x59,
0x95,
0x47,
0x1e,
0xea,
0xee,
0x65,
0x76,
0x8f,
0xf4,
0x23,
0x7b,
0x98,
0xb7,
0x7d,
0x65,
0xc8,
0xd4,
0x04,
0x55,
0xc8,
0xaf,
0x77,
0x32,
0xc8,
0xc7,
0x22,
0x7f,
0x99,
0xfa,
0x29,
0x3c,
0xd0,
0xfb,
0x32,
0x72,
0x86,
0xb9,
0x65,
0x53,
0x8f,
0xe6,
0x34,
0x7f,
0x8d,
0xf0,
0x09,
0x7f,
0x87,
0xf0,
0x65,
0x24,
0xc8,
0xc1,
0x26,
0x70,
0x81,
0xd8,
0x28,
0x68,
0x83,
0xfb,
0x20,
0x4c,
0x8f,
0xe5,
0x28,
0x6c,
0x9e,
0xb7,
0x3a,
0x32,
0xc8,
0xf7,
0x28,
0x7a,
0x93,
0xb7,
0x7d,
0x65,
0xc8,
0xd4,
0x29,
0x67,
0xc8,
0xaf,
0x3c,
0x3c,
0xa3,
0xd1,
0x65,
0x24,
0xc8,
0xa5,
0x65,
0x32,
0xc8,
0xd8,
0x28,
0x68,
0x8f,
0xd1,
0x2e,
0x6c,
0x8f,
0xf6,
0x33,
0x77,
0x85,
0xfb,
0x65,
0x24,
0xc8,
0xbd,
0x77,
0x30,
0xda,
0xa5,
0x6b,
0x3e,
0xda,
0xbb,
0x77,
0x2e,
0xc6,
0xb5,
0x77,
0x30,
0xda,
0xa5,
0x6e,
0x3c,
0xc6,
0xb7,
0x0a,
0x71,
0x9c,
0xf0,
0x03,
0x7b,
0x86,
0xe1,
0x26,
0x3c,
0xd0,
0xb7,
0x77,
0x3c,
0xc6,
0xb7,
0x15,
0x71,
0x9e,
0xf4,
0x33,
0x77,
0x85,
0xfb,
0x11,
0x7b,
0x89,
0xe1,
0x28,
0x6c,
0xc8,
0xaf,
0x65,
0x36,
0xda,
0xbb,
0x77,
0x2e,
0xc6,
0xb5,
0x77,
0x30,
0xda,
0xa5,
0x6b,
0x3e,
0xda,
0xbb,
0x77,
0x2e,
0xc3,
0xb7,
0x6b,
0x3c,
0xb8,
0xfa,
0x33,
0x7f,
0x9e,
0xfc,
0x28,
0x70,
0xae,
0xf0,
0x2b,
0x6a,
0x8b,
0xb7,
0x7d,
0x3c,
0xda,
0xb7,
0x6b,
0x3c,
0xbe,
0xfa,
0x30,
0x7b,
0x98,
0xc7,
0x28,
0x6a,
0x8b,
0xe1,
0x2e,
0x71,
0x84,
0xc3,
0x22,
0x7d,
0x9e,
0xfa,
0x35,
0x3c,
0xd0,
0xb7,
0x6f,
0x2e,
0xc4,
0xa5,
0x77,
0x32,
0xca,
0xb8,
0x70,
0x2b,
0xc4,
0xa1,
0x7f,
0x32,
0xca,
0xa5,
0x69,
0x2e,
0xda,
0xbc,
0x65,
0x32,
0xc8,
0xc1,
0x28,
0x69,
0x8f,
0xe7,
0x15,
0x71,
0x9e,
0xf4,
0x33,
0x77,
0x85,
0xfb,
0x03,
0x7b,
0x86,
0xe1,
0x26,
0x3c,
0xd0,
0xb7,
0x77,
0x3c,
0xc6,
0xb7,
0x04,
0x7f,
0x84,
0xfb,
0x28,
0x70,
0xb8,
0xfa,
0x33,
0x7f,
0x9e,
0xfc,
0x28,
0x70,
0xbc,
0xf0,
0x24,
0x6a,
0x85,
0xe7,
0x65,
0x24,
0xc8,
0xbd,
0x6a,
0x2e,
0xc4,
0xa4,
0x74,
0x32,
0xca,
0xa5,
0x69,
0x2e,
0xda,
0xb9,
0x67,
0x2e,
0xc4,
0xa5,
0x77,
0x37,
0xc8,
0xb9,
0x65,
0x5d,
0x8b,
0xfb,
0x29,
0x71,
0x84,
0xc7,
0x28,
0x6a,
0x8b,
0xe1,
0x2e,
0x71,
0x84,
0xd1,
0x22,
0x72,
0x9e,
0xf4,
0x65,
0x24,
0xc8,
0xa5,
0x65,
0x63,
0x97,
0xe8 })]
        [InlineData(1, new byte[] {0x81,
0xfe,
0x01,
0x6d,
0xb1,
0xa6,
0x3d,
0xa9,
0xca,
0x84,
0x55,
0xcc,
0xd0,
0xc2,
0x58,
0xdb,
0x93,
0x9c,
0x46,
0x8b,
0xf0,
0xe5,
0x76,
0x8b,
0x8b,
0x96,
0x11,
0x8b,
0xe3,
0xc3,
0x5c,
0xda,
0xde,
0xc8,
0x1f,
0x93,
0xdf,
0xd3,
0x51,
0xc5,
0x9d,
0x84,
0x70,
0xcc,
0xc2,
0xd5,
0x5c,
0xce,
0xd4,
0xe8,
0x5c,
0xc4,
0xd4,
0x84,
0x07,
0x8b,
0xe5,
0xc7,
0x53,
0xc2,
0xfc,
0xc9,
0x4b,
0xc0,
0xdf,
0xc1,
0x6f,
0xcc,
0xc1,
0xc9,
0x4f,
0xdd,
0x93,
0xdb,
0x11,
0x8b,
0xd3,
0xc9,
0x59,
0xd0,
0x93,
0x9c,
0x46,
0x8b,
0xf0,
0xc8,
0x44,
0x8b,
0x8b,
0xdd,
0x1f,
0xe0,
0xf5,
0x84,
0x07,
0x8b,
0x81,
0x84,
0x11,
0x8b,
0xfc,
0xc9,
0x4b,
0xcc,
0xf5,
0xcf,
0x4f,
0xcc,
0xd2,
0xd2,
0x54,
0xc6,
0xdf,
0x84,
0x07,
0x8b,
0x99,
0x96,
0x13,
0x99,
0x81,
0x8a,
0x1d,
0x99,
0x9f,
0x96,
0x0d,
0x85,
0x91,
0x96,
0x13,
0x99,
0x81,
0x8f,
0x1f,
0x85,
0x93,
0xeb,
0x52,
0xdf,
0xd4,
0xe2,
0x58,
0xc5,
0xc5,
0xc7,
0x1f,
0x93,
0x93,
0x96,
0x13,
0x99,
0x81,
0x90,
0x0c,
0x9c,
0x80,
0x91,
0x0b,
0x8b,
0x9d,
0x84,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x6b,
0xcc,
0xd2,
0xd2,
0x52,
0xdb,
0x93,
0x9c,
0x1f,
0x81,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x10,
0x9d,
0x89,
0x92,
0x13,
0x9a,
0x80,
0x8a,
0x1d,
0x99,
0x9f,
0x96,
0x0d,
0x80,
0x93,
0x8a,
0x1f,
0xfb,
0xde,
0xd2,
0x5c,
0xdd,
0xd8,
0xc9,
0x53,
0xed,
0xd4,
0xca,
0x49,
0xc8,
0x93,
0x9c,
0x1f,
0x84,
0x81,
0x88,
0x0d,
0x99,
0x87,
0x97,
0x08,
0x98,
0x86,
0x90,
0x1f,
0x85,
0x93,
0xf2,
0x52,
0xde,
0xd4,
0xd4,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x6b,
0xcc,
0xd2,
0xd2,
0x52,
0xdb,
0x93,
0x9c,
0x1f,
0x81,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x10,
0x99,
0x9f,
0x90,
0x0c,
0x85,
0x91,
0x96,
0x13,
0x99,
0x81,
0x8f,
0x1f,
0x85,
0x93,
0xf2,
0x52,
0xde,
0xd4,
0xd4,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x79,
0xcc,
0xdd,
0xd2,
0x5c,
0x8b,
0x8b,
0x84,
0x0d,
0x8b,
0x9d,
0x84,
0x7e,
0xc8,
0xdf,
0xc8,
0x52,
0xc7,
0xe3,
0xc9,
0x49,
0xc8,
0xc5,
0xcf,
0x52,
0xc7,
0xe7,
0xc3,
0x5e,
0xdd,
0xde,
0xd4,
0x1f,
0x93,
0x93,
0x8e,
0x0d,
0x87,
0x81,
0x96,
0x11,
0x89,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x0d,
0x87,
0x81,
0x96,
0x14,
0x8b,
0x9d,
0x84,
0x7e,
0xc8,
0xdf,
0xc8,
0x52,
0xc7,
0xe3,
0xc9,
0x49,
0xc8,
0xc5,
0xcf,
0x52,
0xc7,
0xf5,
0xc3,
0x51,
0xdd,
0xd0,
0x84,
0x07,
0x8b,
0x81,
0x84,
0x40,
0xd4,
0xcc,
0xde,
0x13
})]
        [InlineData(3, new byte[] {0x81,
0xfe,
0x01,
0x59,
0x95,
0x47,
0x1e,
0xea,
0xee,
0x65,
0x76,
0x8f,
0xf4,
0x23,
0x7b,
0x98,
0xb7,
0x7d,
0x65,
0xc8,
0xd4,
0x04,
0x55,
0xc8,
0xaf,
0x77,
0x32,
0xc8,
0xc7,
0x22,
0x7f,
0x99,
0xfa,
0x29,
0x3c,
0xd0,
0xfb,
0x32,
0x72,
0x86,
0xb9,
0x65,
0x53,
0x8f,
0xe6,
0x34,
0x7f,
0x8d,
0xf0,
0x09,
0x7f,
0x87,
0xf0,
0x65,
0x24,
0xc8,
0xc1,
0x26,
0x70,
0x81,
0xd8,
0x28,
0x68,
0x83,
0xfb,
0x20,
0x4c,
0x8f,
0xe5,
0x28,
0x6c,
0x9e,
0xb7,
0x3a,
0x32,
0xc8,
0xf7,
0x28,
0x7a,
0x93,
0xb7,
0x7d,
0x65,
0xc8,
0xd4,
0x29,
0x67,
0xc8,
0xaf,
0x3c,
0x3c,
0xa3,
0xd1,
0x65,
0x24,
0xc8,
0xa5,
0x65,
0x32,
0xc8,
0xd8,
0x28,
0x68,
0x8f,
0xd1,
0x2e,
0x6c,
0x8f,
0xf6,
0x33,
0x77,
0x85,
0xfb,
0x65,
0x24,
0xc8,
0xbd,
0x77,
0x30,
0xda,
0xa5,
0x6b,
0x3e,
0xda,
0xbb,
0x77,
0x2e,
0xc6,
0xb5,
0x77,
0x30,
0xda,
0xa5,
0x6e,
0x3c,
0xc6,
0xb7,
0x0a,
0x71,
0x9c,
0xf0,
0x03,
0x7b,
0x86,
0xe1,
0x26,
0x3c,
0xd0,
0xb7,
0x77,
0x3c,
0xc6,
0xb7,
0x15,
0x71,
0x9e,
0xf4,
0x33,
0x77,
0x85,
0xfb,
0x11,
0x7b,
0x89,
0xe1,
0x28,
0x6c,
0xc8,
0xaf,
0x65,
0x36,
0xda,
0xbb,
0x77,
0x2e,
0xc6,
0xb5,
0x77,
0x30,
0xda,
0xa5,
0x6b,
0x3e,
0xda,
0xbb,
0x77,
0x2e,
0xc3,
0xb7,
0x6b,
0x3c,
0xb8,
0xfa,
0x33,
0x7f,
0x9e,
0xfc,
0x28,
0x70,
0xae,
0xf0,
0x2b,
0x6a,
0x8b,
0xb7,
0x7d,
0x3c,
0xda,
0xb7,
0x6b,
0x3c,
0xbe,
0xfa,
0x30,
0x7b,
0x98,
0xc7,
0x28,
0x6a,
0x8b,
0xe1,
0x2e,
0x71,
0x84,
0xc3,
0x22,
0x7d,
0x9e,
0xfa,
0x35,
0x3c,
0xd0,
0xb7,
0x6f,
0x2e,
0xc4,
0xa5,
0x77,
0x32,
0xca,
0xb8,
0x70,
0x2b,
0xc4,
0xa1,
0x7f,
0x32,
0xca,
0xa5,
0x69,
0x2e,
0xda,
0xbc,
0x65,
0x32,
0xc8,
0xc1,
0x28,
0x69,
0x8f,
0xe7,
0x15,
0x71,
0x9e,
0xf4,
0x33,
0x77,
0x85,
0xfb,
0x03,
0x7b,
0x86,
0xe1,
0x26,
0x3c,
0xd0,
0xb7,
0x77,
0x3c,
0xc6,
0xb7,
0x04,
0x7f,
0x84,
0xfb,
0x28,
0x70,
0xb8,
0xfa,
0x33,
0x7f,
0x9e,
0xfc,
0x28,
0x70,
0xbc,
0xf0,
0x24,
0x6a,
0x85,
0xe7,
0x65,
0x24,
0xc8,
0xbd,
0x6a,
0x2e,
0xc4,
0xa4,
0x74,
0x32,
0xca,
0xa5,
0x69,
0x2e,
0xda,
0xb9,
0x67,
0x2e,
0xc4,
0xa5,
0x77,
0x37,
0xc8,
0xb9,
0x65,
0x5d,
0x8b,
0xfb,
0x29,
0x71,
0x84,
0xc7,
0x28,
0x6a,
0x8b,
0xe1,
0x2e,
0x71,
0x84,
0xd1,
0x22,
0x72,
0x9e,
0xf4,
0x65,
0x24,
0xc8,
0xa5,
0x65,
0x63,
0x97,
0xe8,
0x89,
0x80,
0x12,
0x23,
0x34,
0x45,
0x81,
0xfe,
0x01,
0x6d,
0xb1,
0xa6,
0x3d,
0xa9,
0xca,
0x84,
0x55,
0xcc,
0xd0,
0xc2,
0x58,
0xdb,
0x93,
0x9c,
0x46,
0x8b,
0xf0,
0xe5,
0x76,
0x8b,
0x8b,
0x96,
0x11,
0x8b,
0xe3,
0xc3,
0x5c,
0xda,
0xde,
0xc8,
0x1f,
0x93,
0xdf,
0xd3,
0x51,
0xc5,
0x9d,
0x84,
0x70,
0xcc,
0xc2,
0xd5,
0x5c,
0xce,
0xd4,
0xe8,
0x5c,
0xc4,
0xd4,
0x84,
0x07,
0x8b,
0xe5,
0xc7,
0x53,
0xc2,
0xfc,
0xc9,
0x4b,
0xc0,
0xdf,
0xc1,
0x6f,
0xcc,
0xc1,
0xc9,
0x4f,
0xdd,
0x93,
0xdb,
0x11,
0x8b,
0xd3,
0xc9,
0x59,
0xd0,
0x93,
0x9c,
0x46,
0x8b,
0xf0,
0xc8,
0x44,
0x8b,
0x8b,
0xdd,
0x1f,
0xe0,
0xf5,
0x84,
0x07,
0x8b,
0x81,
0x84,
0x11,
0x8b,
0xfc,
0xc9,
0x4b,
0xcc,
0xf5,
0xcf,
0x4f,
0xcc,
0xd2,
0xd2,
0x54,
0xc6,
0xdf,
0x84,
0x07,
0x8b,
0x99,
0x96,
0x13,
0x99,
0x81,
0x8a,
0x1d,
0x99,
0x9f,
0x96,
0x0d,
0x85,
0x91,
0x96,
0x13,
0x99,
0x81,
0x8f,
0x1f,
0x85,
0x93,
0xeb,
0x52,
0xdf,
0xd4,
0xe2,
0x58,
0xc5,
0xc5,
0xc7,
0x1f,
0x93,
0x93,
0x96,
0x13,
0x99,
0x81,
0x90,
0x0c,
0x9c,
0x80,
0x91,
0x0b,
0x8b,
0x9d,
0x84,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x6b,
0xcc,
0xd2,
0xd2,
0x52,
0xdb,
0x93,
0x9c,
0x1f,
0x81,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x10,
0x9d,
0x89,
0x92,
0x13,
0x9a,
0x80,
0x8a,
0x1d,
0x99,
0x9f,
0x96,
0x0d,
0x80,
0x93,
0x8a,
0x1f,
0xfb,
0xde,
0xd2,
0x5c,
0xdd,
0xd8,
0xc9,
0x53,
0xed,
0xd4,
0xca,
0x49,
0xc8,
0x93,
0x9c,
0x1f,
0x84,
0x81,
0x88,
0x0d,
0x99,
0x87,
0x97,
0x08,
0x98,
0x86,
0x90,
0x1f,
0x85,
0x93,
0xf2,
0x52,
0xde,
0xd4,
0xd4,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x6b,
0xcc,
0xd2,
0xd2,
0x52,
0xdb,
0x93,
0x9c,
0x1f,
0x81,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x10,
0x99,
0x9f,
0x90,
0x0c,
0x85,
0x91,
0x96,
0x13,
0x99,
0x81,
0x8f,
0x1f,
0x85,
0x93,
0xf2,
0x52,
0xde,
0xd4,
0xd4,
0x6f,
0xc6,
0xc5,
0xc7,
0x49,
0xc0,
0xde,
0xc8,
0x79,
0xcc,
0xdd,
0xd2,
0x5c,
0x8b,
0x8b,
0x84,
0x0d,
0x8b,
0x9d,
0x84,
0x7e,
0xc8,
0xdf,
0xc8,
0x52,
0xc7,
0xe3,
0xc9,
0x49,
0xc8,
0xc5,
0xcf,
0x52,
0xc7,
0xe7,
0xc3,
0x5e,
0xdd,
0xde,
0xd4,
0x1f,
0x93,
0x93,
0x8e,
0x0d,
0x87,
0x81,
0x96,
0x11,
0x89,
0x81,
0x88,
0x0d,
0x99,
0x9d,
0x86,
0x0d,
0x87,
0x81,
0x96,
0x14,
0x8b,
0x9d,
0x84,
0x7e,
0xc8,
0xdf,
0xc8,
0x52,
0xc7,
0xe3,
0xc9,
0x49,
0xc8,
0xc5,
0xcf,
0x52,
0xc7,
0xf5,
0xc3,
0x51,
0xdd,
0xd0,
0x84,
0x07,
0x8b,
0x81,
0x84,
0x40,
0xd4,
0xcc,
0xde,
0x13
})]
        public void DataByteAlgorithmLengthCheck(int expectedDataCount, byte[] data)
        {
            var dataBuffer = new DataBuffer();
            dataBuffer.Initialize();

            Array.Copy(data, dataBuffer.buffer, data.Length);

            var message = dataBuffer.DecodeFrameRFC6455(data.Length);

            Assert.Equal(expectedDataCount, message.Count);
        }


        [Fact]
        public void ByteXOR()
        {
            byte val1 = 0x11;
            byte val2 = 0x22;

            Assert.Equal(0x33, (byte)(val1 ^ val2));
        }

        [Fact]
        public void BitConverterTest()
        {
            long value = 9999;

            var bytes = BitConverter.GetBytes(value);

            Assert.Equal(8, bytes.Length);
        }
    }
}
